#!/usr/bin/env bash

COL_NONE='\033[0m'
COL_RED='\033[1;31m'            
COL_CYAN='\033[1;36m'
COL_GREEN='\033[1;32m'            

printWithColour() {
	echo -en "$2$1${COL_NONE}"
}

message() {
    printWithColour "[ Blinding Skies build agent ] ->  " $COL_CYAN
    echo -e "$1"
}

didFail() {
    [ $? -ne 0 ]
}

didSucceed() {
    [ $? -eq 0 ]
}

# Note: won't work with set -e 
onError() {                            
    if didFail; then
        printWithColour $1 $COL_RED 
    fi                                
}                                     

pushdSilent() {
    pushd $1 > /dev/null
}

popdSilent() {
    popd > /dev/null
}

cd_and_execute() {
    pushd $1 > /dev/null ; $2; popd > /dev/null
}

absolutePath() {
    pushd $1 > /dev/null
    echo $(pwd)
    popd > /dev/null
}

printUsage() {
    echo -e "\nUsage: $0 [-c configuration] [-s scheme] [-t test-scheme] [-v]\n"
    echo -e "   -c  Specify configuration [Debug|Release] \t(Optional, default=Debug)"
    echo -e "   -s  Scheme to build \t\t\t\t(Optional, default=$PROJECT_NAME)"
    echo -e "   -t  Scheme to run tests against \t\t(Optional, default=$PROJECT_NAME)"
    echo -e "   -v  Turn on verbose output \t\t\t(Optional)"
    echo -e "   -n  Disable fancy text \t\t\t(Optional)"
    echo 
}

unlockKeychain() {
    if [ `whoami` = "qa" ]; then
        security unlock-keychain -p "qazwsx" ${KEYCHAIN} 
        security default-keychain -s ${KEYCHAIN}
    fi
}

# Load project specific configuration
source `dirname $0`/../project.cfg 

# Defaults                                           
CONFIGURATION="Debug"                                
VERBOSE=false            
FANCY_TEXT=true
SCHEME=""
TEST_SCHEME=$PROJECT_NAME

# Process args                    
while getopts ``:c:s:t:vn'' OPTION
do                                
    case $OPTION in
        c)  CONFIGURATION=$OPTARG 
            ;;
        s)  SCHEME=$OPTARG
            ;;
        t)  TEST_SCHEME=$OPTARG
            ;;
        v)  VERBOSE=true
            ;;
        n)  FANCY_TEXT=false
            ;;
        ?)
            printUsage
            exit 1
            ;;
    esac                          
done                                                                                  

# Directories
PODS_ROOT=$PROJECT_DIR/Pods
OUTPUT_DIR=$PROJECT_DIR/Output/${SCHEME// /_}                     
ARTIFACT_DIR=$OUTPUT_DIR/Artifacts
LOG_DIR=$OUTPUT_DIR/Logs

echo "\nSCRIPT_DIR: $SCRIPT_DIR"
echo "\nPROJECT_NAME: $PROJECT_NAME"
echo "\nPROJECT_DIR: $PROJECT_DIR"
echo "\nCONFIGURATION: $CONFIGURATION"
echo "\nVERBOSE: $VERBOSE"
echo "\nFANCY_TEXT: $FANCY_TEXT"
echo "\nSCHEME: $SCHEME"
echo "\nTEST_SCHEME: $TEST_SCHEME"






